# report.py
#
# Exercise 2.4
import csv
import sys
import fileparse as fp
from stock import Stock
from portfolio import Portfolio
import tableformat

def read_portfolio(portfolio_path: str) -> dict:
    '''
    Read a stock portfolio file into a list of dictionaries with keys
    name, shares, price.
    '''
    with open(portfolio_path) as lines:
        portfolio = fp.parse_csv(lines, 
                                select=['name','shares','price'], 
                                types=[str,int,float])
    portfolio = [ Stock(d['name'], d['shares'], d['price']) for d in portfolio ]
    return Portfolio(portfolio)

def read_prices(prices_path: str) -> dict:
    with open(prices_path) as lines:
        prices = fp.parse_csv(lines, has_headers=False, types=[str, float])
    return dict(prices)

def calculate_current_value(portfolio: dict, prices: dict):
    """
    calculate and print current portfolio value and gain/loss

    Args:
        portfolio (dict): dict, generated by read_portfolio() func
        prices (dict): prices, generated by read_prices() func
    """
    total_value = 0
    for holding in portfolio:
        total_value += holding.price*holding.shares
    current_value = 0
    for holding in portfolio:
        current_value += prices[holding.name]*holding.shares
    gain_loss = current_value - total_value
    print('current portfolio value =', current_value)
    print('gain/loss = ', gain_loss) 

def make_report(stocks_list, prices_dict):
    report = []
    for holding in stocks_list:
        price = prices_dict[holding.name]
        change = price - holding.price
        entry = (holding.name, holding.shares, price, change)
        report.append(entry)
    return report

def print_report(report: dict, formatter):
    """
    print report, generated by make_report() func
    """
    formatter.headings(['Name', 'Shares', 'Price', 'Change'])
    for name, shares, price, change in report:
        rowdata = [ name, str(shares), f'{price:0.2f}', f'{change:0.2f}']
        formatter.row(rowdata)
        
def portfolio_report(portfolio_path: str, prices_path: str, fmt='txt'): 
    portfolio = read_portfolio(portfolio_path)
    prices = read_prices(prices_path)

    #calculate_current_value(portfolio, prices)

    report = make_report(portfolio, prices)
    formatter = tableformat.create_formatter(fmt)
    print_report(report, formatter)

def main(cl_options):
    if len(sys.argv) == 3:
        return portfolio_report(cl_options[1], cl_options[2])
    elif len(sys.argv) == 4:
        return portfolio_report(cl_options[1], cl_options[2], cl_options[3])

if __name__ == '__main__':
    if len(sys.argv) >= 3:
        main(sys.argv)
    else: 
        print('not enough arguments')